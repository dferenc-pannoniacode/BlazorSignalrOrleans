@page "/chat"

@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@attribute [Authorize]

@inject NavigationManager NavigationManager
@inject IAccessTokenProvider AuthorizationService

@implements IAsyncDisposable


<EditForm Model="@model" OnSubmit="@Send">
    <InputText id="message" @bind-Value="model.Message" />

    <button type="submit">Submit</button>
</EditForm>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    HubConnection hubConnection = null!;
    List<string> messages = new List<string>();
    MessageModel model = new();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/chathub"), options =>
            {
                options.AccessTokenProvider = GetAccessTokenAsync;
            })
            .Build();

        hubConnection.On<string>("ReceiveMessage", (message) =>
        {
            var encodedMsg = $"{message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    async Task<string> GetAccessTokenAsync()
    {
        var authState = await AuthorizationService.RequestAccessToken();
        authState.TryGetToken(out var accessToken);

        return accessToken?.Value;
    }

    void Send()
    {
        hubConnection.SendAsync("SendMessage", model.Message);
    }

    public bool IsConnected()
    {
        if (hubConnection == null)
        {
            return false;
        }

        return hubConnection.State == HubConnectionState.Connected;
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

    public class MessageModel
    {
        public string Message { get; set; }
    }
}